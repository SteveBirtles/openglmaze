package main

import (
	"unicode"

	gl "github.com/go-gl/gl/v3.1/gles2"
)

var letters = map[rune][]float32{
	'A': {
		-200, -300, 0, 300,
		0, 300, 200, -300,
		-100, 0, 100, 0,
	},
	'B': {
		-150, 300, -150, -300,
		-150, 300, 150, 150,
		-150, 0, 150, 150,
		-150, -300, 150, -150,
		-150, 0, 150, -150,
	},
	'C': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, -150, -150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
	},
	'D': {
		150, 150, 0, 300,
		0, 300, -150, 300,
		-150, 300, -150, -300,
		150, -150, 0, -300,
		0, -300, -150, -300,
		150, -150, 150, 150,
	},
	'E': {
		-150, -300, -150, 300,
		-150, -300, 150, -300,
		-150, 0, 150, 0,
		-150, 300, 150, 300,
	},
	'F': {
		-150, -300, -150, 300,
		-150, 300, 150, 300,
		-150, 0, 150, 0,
	},
	'G': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, -150, -150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
		150, -150, 150, 0,
		150, 0, 0, 0,
	},
	'H': {
		-150, -300, -150, 300,
		-150, 0, 150, 0,
		150, -300, 150, 300,
	},
	'I': {
		0, -300, 0, 300,
		-100, -300, 100, -300,
		-100, 300, 100, 300,
	},
	'J': {
		0, 300, 0, -200,
		-200, 300, 200, 300,
		0, -200, -100, -300,
		-100, -300, -200, -200,
	},
	'K': {
		-150, -300, -150, 300,
		-150, 0, 150, 300,
		-150, 0, 150, -300,
	},
	'L': {
		-150, -300, -150, 300,
		-150, -300, 150, -300,
	},
	'M': {
		-200, -300, -200, 300,
		-200, 300, 0, 100,
		200, 300, 0, 100,
		200, -300, 200, 300,
	},
	'N': {
		-150, -300, -150, 300,
		-150, 300, 150, -300,
		150, -300, 150, 300,
	},
	'O': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, -150, -150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
		150, 150, 150, -150,
	},
	'P': {
		-150, 300, -150, -300,
		-150, 300, 150, 150,
		-150, 0, 150, 150,
	},
	'Q': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, -150, -150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
		150, 150, 150, -150,
		0, -150, 150, -300,
	},
	'R': {
		-150, 300, -150, -300,
		-150, 300, 150, 150,
		-150, 0, 150, 150,
		-150, 0, 150, -300,
	},
	'S': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, 150, -150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
	},
	'T': {
		0, -300, 0, 300,
		-200, 300, 200, 300,
	},
	'U': {
		-150, -150, -150, 300,
		150, -150, 150, 300,
		-150, -150, 0, -300,
		150, -150, 0, -300,
	},
	'V': {
		-150, 300, 0, -300,
		150, 300, 0, -300,
	},
	'W': {
		-150, -300, -200, 300,
		-150, -300, 0, 100,
		150, -300, 0, 100,
		150, -300, 200, 300,
	},
	'X': {
		200, 300, -200, -300,
		-200, 300, 200, -300,
	},
	'Y': {
		200, 300, 0, 0,
		-200, 300, 0, 0,
		0, -300, 0, 0,
	},
	'Z': {
		-200, -300, 200, 300,
		-200, -300, 200, -300,
		-200, 300, 200, 300,
	},
	'1': {
		0, -300, 0, 300,
		0, 300, -150, 200,
	},
	'2': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		150, 150, 150, 0,
		-150, -300, 150, 0,
		200, -300, -150, -300,
	},
	'3': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, -150, 0, -300,
		150, -150, 0, -300,
		0, 0, 150, 150,
		0, 0, 150, -150,
	},
	'4': {
		150, -300, 150, 300,
		-150, 0, 150, 0,
		-150, 0, -50, 300,
	},
	'5': {
		-150, 0, -150, 300,
		-150, 300, 150, 300,
		-150, 0, 150, 0,
		150, 0, 150, -150,
		150, -150, 0, -300,
		-150, -300, 0, -300,
	},
	'6': {
		-150, -200, -150, 200,
		-150, 200, 150, 300,
		-150, 0, 150, 0,
		150, 0, 150, -150,
		150, -150, 0, -300,
		-150, -200, 0, -300,
	},
	'7': {
		-150, -300, 200, 300,
		-200, 300, 200, 300,
	},
	'8': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, 150, -150,
		-150, -150, 150, 150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
	},
	'9': {
		150, 200, 150, -200,
		150, -200, -150, -300,
		150, 0, -150, 0,
		-150, 0, -150, 150,
		-150, 150, 0, 300,
		150, 200, 0, 300,
	},
	'0': {
		150, 150, 0, 300,
		-150, 150, 0, 300,
		-150, 150, -150, -150,
		-150, -150, 0, -300,
		150, -150, 0, -300,
		150, 150, 150, -150,
		-150, -150, 150, 150,
	},
	'-': {
		-150, 0, 150, 0,
	},
	'.': {
		-10, -300, -10, -250,
		0, -300, 0, -250,
		10, -300, 10, -250,
	},
}

func drawLetter(char rune, x int, y int, width int) int {

	letter, ok := letters[unicode.ToUpper(char)]
	if !ok {
		return 0
	}

	minX := float32(1000000)
	maxX := float32(-1000000)

	scale := float32(width) / 400

	letterLineVertices := []float32{}
	letterLineVertices = append(letterLineVertices, letter...)
	for i := 0; i < len(letterLineVertices); i++ {
		letterLineVertices[i] *= scale
		if i%2 == 0 {
			if letterLineVertices[i] < minX {
				minX = letterLineVertices[i]
			} else if letterLineVertices[i] > maxX {
				maxX = letterLineVertices[i]
			}
			letterLineVertices[i] += float32(x)
		} else {
			letterLineVertices[i] += float32(y)
		}
	}

	for i := 0; i < len(letterLineVertices); i += 2 {
		letterLineVertices[i] -= (float32(width) - (maxX - minX)) / 2
	}

	gl.BufferData(gl.ARRAY_BUFFER, len(letterLineVertices)*4, gl.Ptr(letterLineVertices), gl.STATIC_DRAW)
	gl.DrawArrays(gl.LINES, 0, int32(len(letterLineVertices))/2)

	return int(maxX - minX)

}

func drawString(textString string, xPos int, yPos int, width int) {
	for _, char := range textString {
		if char == ' ' {
			xPos += width
		} else if char == '\t' {
			xPos += width * 4
		} else {
			xPos += drawLetter(char, xPos, yPos, width) + width/4
		}
	}
}
